comment start
label Main_main_0
## new Int
movq $0, t0(%r12)
movq 3, t0
## new Int
movq $0, t1(%r12)
movq 5, t1
## new Int
movq $0, %r14(%r12)
movq $t0, %r14
addq t1, %r14
movq %r14, t2
t3 <- call out_int t2
return t3
.globl Main.main
Main.main:				## method definition
push %rbp
movq 16(%rsp), %r12
## stack room for temporaries: x
subq $16, %rsp
## return address handling
## method body begins
.globl Main.main.end
Main.main.end:				## ## method body ends
## return address handling
movq %rbp, %rsp
pop %rbp
					## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl Bool..vtable
Bool..vtable:		 ## virtual function table for Bool
					.quad string1
					.quad Bool..new
					.quad Object.abort
					.quad Object.copy
					.quad Object.type_name
					## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl IO..vtable
IO..vtable:		 ## virtual function table for IO
					.quad string2
					.quad IO..new
					.quad Object.abort
					.quad Object.copy
					.quad Object.type_name
					.quad IO.in_int
					.quad IO.in_string
					.quad IO.out_int
					.quad IO.out_string
					## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl Int..vtable
Int..vtable:		 ## virtual function table for Int
					.quad string3
					.quad Int..new
					.quad Object.abort
					.quad Object.copy
					.quad Object.type_name
					## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl Main..vtable
Main..vtable:		 ## virtual function table for Main
					.quad string4
					.quad Main..new
					.quad Object.abort
					.quad Object.copy
					.quad Object.type_name
					.quad IO.in_int
					.quad IO.in_string
					.quad IO.out_int
					.quad IO.out_string
					.quad Main.main
					## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl Object..vtable
Object..vtable:		 ## virtual function table for Object
					.quad string5
					.quad Object..new
					.quad Object.abort
					.quad Object.copy
					.quad Object.type_name
					## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl String..vtable
String..vtable:		 ## virtual function table for String
					.quad string6
					.quad String..new
					.quad Object.abort
					.quad Object.copy
					.quad Object.type_name
					.quad String.concat
					.quad String.length
					.quad String.substr
						## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl Bool..new
Bool..new:				##constructor for Bool
						pushq %rbp
						movq %rsp, %rbp
						## stack room for temporaries: 1
						movq $8, %r14
						subq %r14, %rsp
						## return address handling
						movq $4, %r12
						movq $8, %rsi
						movq %r12, %rdi
						call calloc
						movq %rax, %r12
						## store class tag, object size and vtable pointer
						movq $0, %r14
						movq %r14, 0(%r12)
						movq $4, %r14
						movq %r14, 8(%r12)
						movq $Bool..vtable, %r14
						movq %r14, 16(%r12)
						## initialize attributes
						## self[3] holds field (raw content) (Int)
						movq $0, %r13
						movq %r13, 24(%r12)
						## self[3] (raw content) initializer -- none 
						movq %r12, %r13
						## return address handling
						movq %rbp, %rsp
						popq %rbp
						ret
						## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl IO..new
IO..new:				##constructor for IO
						pushq %rbp
						movq %rsp, %rbp
						## stack room for temporaries: 1
						movq $8, %r14
						subq %r14, %rsp
						## return address handling
						movq $3, %r12
						movq $8, %rsi
						movq %r12, %rdi
						call calloc
						movq %rax, %r12
						## store class tag, object size and vtable pointer
						movq $10, %r14
						movq %r14, 0(%r12)
						movq $3, %r14
						movq %r14, 8(%r12)
						movq $IO..vtable, %r14
						movq %r14, 16(%r12)
						movq %r12, %r13
						## return address handling
						movq %rbp, %rsp
						popq %rbp
						ret
						## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl Int..new
Int..new:				##constructor for Int
						pushq %rbp
						movq %rsp, %rbp
						## stack room for temporaries: 1
						movq $8, %r14
						subq %r14, %rsp
						## return address handling
						movq $4, %r12
						movq $8, %rsi
						movq %r12, %rdi
						call calloc
						movq %rax, %r12
						## store class tag, object size and vtable pointer
						movq $1, %r14
						movq %r14, 0(%r12)
						movq $4, %r14
						movq %r14, 8(%r12)
						movq $Int..vtable, %r14
						movq %r14, 16(%r12)
						## initialize attributes
						## self[3] holds field (raw content) (Int)
						movq $0, %r13
						movq %r13, 24(%r12)
						## self[3] (raw content) initializer -- none 
						movq %r12, %r13
						## return address handling
						movq %rbp, %rsp
						popq %rbp
						ret
						## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl Main..new
Main..new:				## constructor for Main
						push %rbp
						## stack room for temporaries: 1
						subq $8, %rsp
						## return address handling
						movq $3, %rsi
						movq $8, %rdi
						call calloc
						movq %rax, %r12
						## store class tag, object size and vtable pointer
						movq $11, 0(%r12)
						movq $0, 8(%r12)
						movq $Main..vtable, 16(%r12)
						## return address handling
						movq %rbp, %rsp
						pop %rbp
						ret
						## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl Object..new
Object..new:				##constructor for Object
						## constructor for Object
						pushq %rbp
						movq %rsp, %rbp
						## stack room for temporaries: 1
						movq $8, %r14
						subq %r14, %rsp
						## return address handling
						movq $3, %r12
						movq $8, %rsi
						movq %r12, %rdi
						call calloc
						movq %rax, %r12
						## store class tag, object size and vtable pointer
						movq $12, %r14
						movq %r14, 0(%r12)
						movq $3, %r14
						movq %r14, 8(%r12)
						movq $Object..vtable, %r14
						movq %r14, 16(%r12)
						movq %r12, %r13
						## return address handling
						movq %rbp, %rsp
						popq %rbp
						ret
						## ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.globl String..new
String..new:				##constructor for String
						pushq %rbp
						movq %rsp, %rbp
						## stack room for temporaries: 1
						movq $8, %r14
						subq %r14, %rsp
						## return address handling
						movq $4, %r12
						movq $8, %rsi
						movq %r12, %rdi
						call calloc
						movq %rax, %r12
						## store class tag, object size and vtable pointer
						movq $3, %r14
						movq %r14, 0(%r12)
						movq $4, %r14
						movq %r14, 8(%r12)
						movq $String..vtable, %r14
						movq %r14, 16(%r12)
						## initialize attributes
						## self[3] holds field (raw content) (String)
						movq $the.empty.string, %r13
						movq %r13, 24(%r12)
						## self[3] (raw content) initializer -- none 
						movq %r12, %r13
						## return address handling
						movq %rbp, %rsp
						popq %rbp
						ret
sample text